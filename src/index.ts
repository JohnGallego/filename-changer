import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import fs from 'fs/promises';
import path from 'path';
import { FileInfo, RenameOperation, RenameResult } from './types';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('list-files', async (event: Electron.IpcMainInvokeEvent, folderPath: string, includeNested: boolean): Promise<FileInfo[]> => {
  const files: FileInfo[] = [];
  
  async function scanDirectory(dirPath: string): Promise<void> {
    const entries = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);
      if (entry.isDirectory() && includeNested) {
        await scanDirectory(fullPath);
      } else if (entry.isFile()) {
        files.push({
          name: entry.name,
          path: fullPath,
          directory: dirPath
        });
      }
    }
  }
  
  await scanDirectory(folderPath);
  return files;
});

ipcMain.handle('rename-files', async (event: Electron.IpcMainInvokeEvent, operations: RenameOperation[]): Promise<RenameResult[]> => {
  const results: RenameResult[] = [];
  
  for (const op of operations) {
    try {
      await fs.rename(op.oldPath, op.newPath);
      results.push({
        success: true,
        oldPath: op.oldPath,
        newPath: op.newPath
      });
    } catch (error) {
      results.push({
        success: false,
        oldPath: op.oldPath,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
  
  return results;
});

ipcMain.handle('select-folder', async () => {
  const result = await dialog.showOpenDialog({
    properties: ['openDirectory']
  });
  
  return result.canceled ? null : result.filePaths[0];
});